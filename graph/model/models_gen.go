// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddUserObj struct {
	Username      string       `json:"username"`
	Fullname      *string      `json:"fullname"`
	Password      string       `json:"password"`
	Role          UserRole     `json:"role"`
	IsActive      bool         `json:"isActive"`
	StreetNo      *int         `json:"streetNo"`
	ZipCode       *int         `json:"zipCode"`
	City          *string      `json:"city"`
	Mobile        *string      `json:"mobile"`
	Email         string       `json:"email"`
	PaymentMethod *PaymentMode `json:"paymentMethod"`
}

type AuthToken struct {
	Token        string `json:"Token"`
	RefreshToken string `json:"RefreshToken"`
}

type CustomerCartObj struct {
	ID         *string   `json:"id"`
	CustomerID string    `json:"customerId"`
	ProductID  []*string `json:"productId"`
}

type PaymentIntent struct {
	ClientSecret string `json:"clientSecret"`
}

type ProductFilter struct {
	Min *float64 `json:"min"`
	Max *float64 `json:"max"`
}

type ProductObj struct {
	ID          *string `json:"id"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Description string  `json:"description"`
	Model       string  `json:"model"`
}

type StripePaymentData struct {
	ProductID string `json:"productId"`
}

type TransactionData struct {
	ID    *string         `json:"id"`
	Type  TransactionType `json:"type"`
	Price float64         `json:"price"`
}

type UpdateCustomerCart struct {
	ID         string    `json:"id"`
	CustomerID string    `json:"customerId"`
	ProductID  []*string `json:"productId"`
}

type UpdateUserObj struct {
	ID            string       `json:"id"`
	Username      *string      `json:"username"`
	Fullname      *string      `json:"fullname"`
	Password      *string      `json:"password"`
	Role          *UserRole    `json:"role"`
	IsActive      *bool        `json:"isActive"`
	StreetNo      *int         `json:"streetNo"`
	ZipCode       *int         `json:"zipCode"`
	City          *string      `json:"city"`
	Mobile        *string      `json:"mobile"`
	Email         string       `json:"email"`
	PaymentMethod *PaymentMode `json:"paymentMethod"`
}

type UploadReturn struct {
	URL string `json:"url"`
}

type UserFilter struct {
	ID       *string   `json:"id"`
	Username *string   `json:"username"`
	Fullname *string   `json:"fullname"`
	IsActive *bool     `json:"isActive"`
	Role     *UserRole `json:"role"`
	Query    *string   `json:"query"`
}

type PaymentMode string

const (
	PaymentModeStripe PaymentMode = "STRIPE"
	PaymentModeCash   PaymentMode = "CASH"
)

var AllPaymentMode = []PaymentMode{
	PaymentModeStripe,
	PaymentModeCash,
}

func (e PaymentMode) IsValid() bool {
	switch e {
	case PaymentModeStripe, PaymentModeCash:
		return true
	}
	return false
}

func (e PaymentMode) String() string {
	return string(e)
}

func (e *PaymentMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMode", str)
	}
	return nil
}

func (e PaymentMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionType string

const (
	TransactionTypeDebit  TransactionType = "DEBIT"
	TransactionTypeCredit TransactionType = "CREDIT"
)

var AllTransactionType = []TransactionType{
	TransactionTypeDebit,
	TransactionTypeCredit,
}

func (e TransactionType) IsValid() bool {
	switch e {
	case TransactionTypeDebit, TransactionTypeCredit:
		return true
	}
	return false
}

func (e TransactionType) String() string {
	return string(e)
}

func (e *TransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionType", str)
	}
	return nil
}

func (e TransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "ADMIN"
	UserRoleEmployees UserRole = "EMPLOYEES"
	UserRoleCustomer  UserRole = "CUSTOMER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleEmployees,
	UserRoleCustomer,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleEmployees, UserRoleCustomer:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
