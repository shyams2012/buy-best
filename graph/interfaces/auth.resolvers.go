package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"log"

	"github.com/shyams2012/buy-best/graph/generated"
	"github.com/shyams2012/buy-best/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.AuthToken, error) {
	user, err := model.GetUserByUsername(r.DB(), username)
	if err != nil {
		log.Print(err)
		return nil, fmt.Errorf("error getting user with username='%s'", username)
	}

	if !user.CheckPassword(password) {
		return nil, fmt.Errorf("username and password do not match")
	}

	token, err := user.Token()
	if err != nil {
		log.Print(err)
		return nil, fmt.Errorf("error generating token")
	}

	if tx := r.DB().Save(user); tx.Error != nil {
		log.Print(tx.Error)
		return nil, fmt.Errorf("error saving user")
	}

	return token, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
