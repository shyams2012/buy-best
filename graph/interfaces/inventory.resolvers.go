package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/shyams2012/buy-best/graph/model"
)

// SetInventory is the resolver for the setInventory field.
func (r *mutationResolver) SetInventory(ctx context.Context, data model.InventoryObj) (*model.Inventory, error) {
	if _, err := CheckAuth(ctx, []model.UserRole{"ADMIN", "EMPLOYEES"}); err != nil {
		return nil, err
	}

	var inventory model.Inventory
	if data.ID == nil {
		inventory.ID = uuid.NewString()
	} else {
		if tx := r.DB().First(&inventory, "id = ?", *data.ID); tx.Error != nil {
			return nil, fmt.Errorf("inventory not found, id='%s'", *data.ID)
		}
	}
	inventory.ProductID = data.ProductID
	inventory.Quantity = data.Quantity

	if tx := r.DB().Save(&inventory); tx.Error != nil {
		log.Print(tx.Error)
		return nil, fmt.Errorf("error saving inventory")
	}

	return &inventory, nil
}

// DeleteInventory is the resolver for the deleteInventory field.
func (r *mutationResolver) DeleteInventory(ctx context.Context, id string) (bool, error) {
	users := UserForContext(ctx)
	if users == nil {
		return false, errors.New("need authentication")
	}
	if users.Role != "ADMIN" {
		return false, fmt.Errorf("not authorized")
	}
	return model.DeleteObject(r.DB(), &model.Product{}, id)
}
