package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"bufio"
	"bytes"
	"context"
	"encoding/base64"
	"fmt"
	"image"
	"image/gif"
	"image/jpeg"
	"image/png"
	"io/ioutil"
	"log"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/disintegration/imaging"
	"github.com/google/uuid"
	"github.com/shyams2012/buy-best/graph/model"
)

func init() {
	image.RegisterFormat("jpeg", "jpeg", jpeg.Decode, jpeg.DecodeConfig)
	image.RegisterFormat("png", "png", png.Decode, png.DecodeConfig)
	image.RegisterFormat("gif", "gif", gif.Decode, gif.DecodeConfig)
}

// SingleUpload is the resolver for the singleUpload field.
func (r *mutationResolver) SingleUpload(ctx context.Context, file graphql.Upload) (bool, error) {
	content, err := ioutil.ReadAll(file.File)

	if err != nil {
		return false, err
	}
	var uploadData model.UploadReturn

	reader := bytes.NewReader(content)

	srcImage, _, err := image.Decode(reader)

	if err != nil {
		return false, err
	}

	resizedImage := imaging.Resize(srcImage, 128, 128, imaging.Lanczos)
	saturatedImage := imaging.AdjustSaturation(resizedImage, 50) // Increase image saturation by 50%.

	fileName := uuid.NewString() + strings.Replace(file.Filename, " ", "", -1)

	filePath := "/static/images/" + fileName
	base64Image, err := ToBase64(saturatedImage)
	if err != nil {
		return false, err
	}
	imageString, err := base64.StdEncoding.DecodeString(base64Image)

	fileErr := ioutil.WriteFile("."+filePath, imageString, 0777)
	if fileErr != nil {
		return false, fileErr
	}
	uploadData.URL = filePath

	image := model.Image{

		ID:  uuid.NewString(),
		Url: filePath,
		Alt: file.Filename,
	}

	if tx := r.DB().Create(&image); tx.Error != nil {
		log.Print(tx.Error)
		return false, fmt.Errorf("error saving image")
	}
	return true, nil
}

func ToBase64(dst *image.NRGBA) (string, error) {
	var b bytes.Buffer
	foo := bufio.NewWriter(&b)
	if err := imaging.Encode(foo, dst, imaging.JPEG); err != nil {
		return "", err
	}
	return base64.StdEncoding.EncodeToString(b.Bytes()), nil
}
