package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/shyams2012/buy-best/graph/model"
)

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, data model.AddUserObj) (*model.User, error) {
	var user model.User
	users := UserForContext(ctx)

	if users == nil {
		return nil, errors.New("need authentication")
	}
	if users.Role != "ADMIN" {
		return nil, fmt.Errorf("NotAuthorized")
	}

	user.ID = uuid.NewString()
	user.Username = data.Username

	// fullName is optional
	if data.Fullname != nil {
		user.Fullname = *data.Fullname
	}

	user.Email = data.Email
	user.Role = data.Role
	user.IsActive = data.IsActive
	user.CreatedAt = time.Now()
	user.ModifiedAt = time.Now()
	user.City = data.City

	user.SetPassword(data.Password)

	if tx := r.DB().Create(&user); tx.Error != nil {
		log.Print(tx.Error)
		return nil, fmt.Errorf("error saving user")
	}

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, data model.UpdateUserObj) (*model.User, error) {
	user, err := CheckAuth(ctx, []model.UserRole{"ADMIN"})
	if err != nil {
		return nil, err
	}

	if tx := r.DB().First(&user, "id = ?", data.ID); tx.Error != nil {
		return nil, fmt.Errorf("user not Found, id=%s", data.ID)
	}

	// Find a better way for this
	if *data.Username != "" {
		user.Username = *data.Username
	}

	if data.Fullname != nil {
		user.Fullname = *data.Fullname
	}

	if *data.Password != "" {
		user.SetPassword(*data.Password)
	}

	if *data.Role != "" {
		user.Role = *data.Role
	}

	if *data.IsActive != true {
		user.IsActive = *data.IsActive
	}

	user.ModifiedAt = time.Now()

	if tx := r.DB().Save(&user).Order("modified_at DESC"); tx.Error != nil {
		log.Print(tx.Error)
		return nil, fmt.Errorf("error updating user for id=%s", data.ID)
	}
	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	users := UserForContext(ctx)
	if users == nil {
		return false, errors.New("need authentication")
	}
	if users.Role != "ADMIN" {
		return false, fmt.Errorf("not authorized")
	}

	if users.ID == id {
		return false, fmt.Errorf("not allowed to delete yourself")
	}
	return model.DeleteObject(r.DB(), &model.User{}, id)
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context, filter *model.UserFilter) ([]*model.User, error) {
	_, err := CheckAuth(ctx, []model.UserRole{"ADMIN"})

	if err != nil {
		return nil, err
	}

	var users []*model.User

	if tx := r.DBWithFilter(filter).Find(&users); tx.Error != nil {
		log.Print(tx.Error)
		return nil, tx.Error
	}

	return users, nil
}

// GetMe is the resolver for the getMe field.
func (r *queryResolver) GetMe(ctx context.Context) (*model.User, error) {
	user, err := CheckAuth(ctx, []model.UserRole{"ADMIN", "EMPLOYEES"})
	if err != nil {
		return nil, err
	}
	fmt.Println(user.ID)
	return user, nil
}
