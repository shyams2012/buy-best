package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/shyams2012/buy-best/graph/lib"
	"github.com/shyams2012/buy-best/graph/model"
	stripe "github.com/stripe/stripe-go"
	"github.com/stripe/stripe-go/customer"
	"github.com/stripe/stripe-go/paymentintent"
)

// Payment is the resolver for the payment field.
func (r *mutationResolver) Payment(ctx context.Context) (bool, error) {
	loggedUser, _ := r.Query().GetMe(ctx)
	stripe.Key = os.Getenv("STRIPE_KEY")
	var amount int64

	if tx := r.DB().Model(&model.CustomerAmount{}).Select("amount").Where("customer_id = ?", loggedUser.ID).Scan(&amount); tx.Error != nil {
		log.Print(tx.Error)
		return false, fmt.Errorf("amount not Found, id=%s", loggedUser.ID)
	}
	var payment = model.Charge{
		Amount:       amount,
		ReceiptEmail: loggedUser.Email,
		Customer:     loggedUser.Username,
	}

	param := &stripe.CustomerParams{
		Email: stripe.String(payment.ReceiptEmail),
		Name:  stripe.String(payment.Customer),
		//Balance: stripe.Int64(amount),
	}
	customer, err := customer.New(param)
	if err != nil {
		log.Fatalf("customer failed with '%s'\n", err)
	}

	params := &stripe.PaymentIntentParams{
		Amount:       stripe.Int64(payment.Amount),
		Currency:     stripe.String(string(stripe.CurrencyUSD)),
		Description:  stripe.String("des"),
		Customer:     stripe.String(customer.ID),
		ReceiptEmail: stripe.String(payment.ReceiptEmail),
	}

	result, err := paymentintent.New(params)
	fmt.Print("result", result.ID)

	if err != nil {
		fmt.Print("Payment Unsuccessfull")
		return false, nil
	}
	err1 := lib.SavePayment(r.DB(), &payment)
	if err1 != nil {
		fmt.Print("err")
	}
	return true, nil
}
